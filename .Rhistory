unlist(list_studentSubmissions)
flatten(list_studentSubmissions)
purrr::flatten(list_studentSubmissions)
list_studentSubmissions[[1]]
list_studentSubmissions[[1]] %>% str(1)
purrr::flatten(list_studentSubmissions)
list_studentSubmissions %>% names()
list_studentSubmissions[[1]] %>% names()
list_studentSubmissions %>%
map_dfr(~.x[1:5])
list_studentSubmissions %>%
purrr::map_dfr(~.x[1:5])
list_studentSubmissions[[1]][1:5]
as.data.frame(list_studentSubmissions[[1]][1:5])
as_tibble(list_studentSubmissions[[1]][1:5])
list_studentSubmissions %>%
purrr::map_dfr(~as_tibble(.x))
list_studentSubmissions %>%
purrr::map_dfr(~{as_tibble(.x)})
resultTibble <- tibble()
resultTibble %>%
rbind(
{list_studentSubmissions[[1]] %>% as_tibble()}
)
for(.x in seq_along(list_studentSubmissions)){
resultTibble %>%
rbind(
{list_studentSubmissions[[.x]] %>% as_tibble()}
)
}
.x
list_studentSubmissions[[.x]] %>% as_tibble()
list_studentSubmissions[[.x]]
list_studentSubmissions[[.x]] %>% names()
studentSubmissionInfo$studentSubmissions %>% #$studentSubmissions[[1]]$submissionHistory[[2]]$stateHistory$stateTimestamp
purrr::map(
~{
list(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> list_studentSubmissions
list_studentSubmissions %>%
purrr::map_dfr(~{as_tibble(.x)})
studentSubmissionInfo$studentSubmissions %>% #$studentSubmissions[[1]]$submissionHistory[[2]]$stateHistory$stateTimestamp
purrr::map_dfr(
~{
tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> list_studentSubmissions
list_studentSubmissions
get_studentSubmissionForACourseWork <- function(courseWorkId)
{
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
studentSubmissionInfo$studentSubmissions %>%
map_dfr(
~{
tidyr::tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> df_studentSubmissions
}
get_studentSubmissionForACourseWork <- function(courseWorkId)
{
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
studentSubmissionInfo$studentSubmissions %>%
map_dfr(
~{
tidyr::tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> df_studentSubmissions
df_studentSubmissions
}
courseWorkId = df_courseworks$id[[1]]
get_studentSubmissionForACourseWork(courseWorkId) -> df_studentSubmissions
get_studentSubmissionForACourseWork <- function(courseWorkId)
{
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
studentSubmissionInfo$studentSubmissions %>%
purrr::map_dfr(
~{
tidyr::tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> df_studentSubmissions
df_studentSubmissions
}
get_studentSubmissionForACourseWork(courseWorkId) -> df_studentSubmissions
df_studentSubmissions
df_studentSubmissions %>% View()
df_studentSubmissions[1,]$attachments[[1]]
browseURL("https://drive.google.com/open?id=10NhjmFCuv82Ja6u0L62zxU2g26KUO_r4")
devtools::load_all(".")
install.packages("googledrive")
require(googledrive)
load("/Users/martinl/Github/course-dashboard-programming-for-data-science/course109-1-program4DS.rda")
courseId = courseInfo$resources$googleClassroom$courseInfo$id
courseId %>% list_courseworksAsDataframe() -> df_courseworks
get_studentSubmissionForACourseWork <- function(courseWorkId)
{
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
studentSubmissionInfo$studentSubmissions %>%
purrr::map_dfr(
~{
tidyr::tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> df_studentSubmissions
df_studentSubmissions
}
list_courseworksAsDataframe <- function(courseId)
{
requestPhrase <- glue::glue(
"GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork")
requestPhrase
list_courseworksFun <- classroom_apiFunctional(requestPhrase)
list_courseworks <- list_courseworksFun()
require(dplyr)
list_courseworks$courseWork %>%
purrr::map_dfr(
~{
data.frame(
title=.x$title,
id=.x$id,
dueDate={.x$dueDate %>% unlist() %>% paste(collapse="-")},
dueTime={.x$dueTime %>% unlist() %>%
stringr::str_pad(width=2, side="left", pad="0") %>%
paste0(":00:00")}
)
}) %>%
mutate(
due=lubridate::ymd_hms(paste0(dueDate,"T",dueTime,"Z")),
due=lubridate::with_tz(due, tzone='Asia/Taipei')
)
}
load("/Users/martinl/Github/course-dashboard-programming-for-data-science/course109-1-program4DS.rda")
courseId = courseInfo$resources$googleClassroom$courseInfo$id
courseId %>% list_courseworksAsDataframe() -> df_courseworks
courseWorkId = df_courseworks$id[[1]]
devtools::load_all(".")
googleclassroom::classroom_auth()
courseId = courseInfo$resources$googleClassroom$courseInfo$id
courseId %>% list_courseworksAsDataframe() -> df_courseworks
courseWorkId = df_courseworks$id[[1]]
get_studentSubmissionForACourseWork(courseWorkId) -> df_studentSubmissions
drive_download(
df_studentSubmissions[1,]$attachments[[1]]$driveFile$alternateLink
)
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
# escapeText
aboutEscape <- '在字串輸入時我們要用成對的"或"將文字包起來，R才會知道他是字串。\n字串在輸入時，若要cat時在螢幕看起來有換行則必需輸入\\n，其中\\稱為Escape key，它讓後面字元跳脫了它在電腦的原始含意。'
cat(aboutEscape)
df_courseworks$title
title = df_courseworks$title
title = df_courseworks$title[[1]]
title
courseWorkId = df_courseworks$id[[1]]
courseId = courseInfo$resources$googleClassroom$courseInfo$id
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{id}")
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{id}")
get_oneCoursework <- function(courseId, courseWorkId){
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
}
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}")
requestPhrase
get_oneCourseworkFun <- classroom_apiFunctional(requestPhrase)
courseworkInfo <- get_oneCourseworkFun()
get_oneCoursework <- function(courseId, courseWorkId){
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}")
requestPhrase
get_oneCourseworkFun <- classroom_apiFunctional(requestPhrase)
courseworkInfo <- get_oneCourseworkFun()
courseworkInfo
}
get_oneCoursework(courseId, courseWorkId) -> courseworkInfo
View(courseworkInfo)
courseworkInfo[["assignment"]][["studentWorkFolder"]][["alternateLink"]]
info=drive_download(
courseworkInfo[["assignment"]][["studentWorkFolder"]][["alternateLink"]]
)
courseworkInfo[["assignment"]][["studentWorkFolder"]][["alternateLink"]]
drive_download(
courseworkInfo[["assignment"]][["studentWorkFolder"]][["alternateLink"]]
)
browseURL(courseworkInfo[["assignment"]][["studentWorkFolder"]][["alternateLink"]])
# get student submissions for a course work
load("~/Github/course-dashboard-programming-for-data-science/109-1-roster.rda")
studentsInfo$googleClassroom[[1]]
studentsInfo$googleClassroom[[1]]$userId
# get student submissions for a course work
load("~/Github/course-dashboard-programming-for-data-science/109-1-roster.rda")
names(roster)
df_studentSubmissions %>% names()
roster %>%
select("姓名","學號","googleUserId") %>%
right_join(
df_studentSubmissions,
by=c("googleUserId"="userId")
)
get_studentSubmissionForACourseWork <- function(courseWorkId, roster)
{
requestPhrase <-
glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions")
requestPhrase
get_aCourseworkStudentSubmissionFun <- classroom_apiFunctional(requestPhrase)
studentSubmissionInfo <- get_aCourseworkStudentSubmissionFun()
studentSubmissionInfo$studentSubmissions %>%
purrr::map_dfr(
~{
tidyr::tibble(
userId=.x$userId,
id=.x$id,
state=.x$state,
attachments={
.x[["assignmentSubmission"]][["attachments"]] -> att
ifelse(is.null(att), list(), att)
},
submissionTime={
.x$submissionHistory %>% length() -> loc_last
.x$submissionHistory[[loc_last]]$stateHistory$stateTimestamp
},
submissionState={
.x$submissionHistory[[loc_last]]$stateHistory$state
}
)
}) -> df_studentSubmissions
roster %>%
select("姓名","學號","googleUserId") %>%
right_join(
df_studentSubmissions,
by=c("googleUserId"="userId")
)
}
get_studentSubmissionForACourseWork(courseWorkId, roster) -> df_studentSubmissions
View(df_studentSubmissions)
destPath = file.path("studentsSubmission", title)
destPath
if(!dir.exists(destPath)) dir.create(destPath)
if(!dir.exists(destPath)) dir.create(destPath, recursive = T)
filename <- paste(title,
df_studentSubmissions[1,]$學號)
filename
filename <- paste0(filename,".Rmd")
filename <- paste(title,
df_studentSubmissions[1,]$學號, sep="_")
filename <- paste0(filename,".Rmd")
filename
filename <- paste(title,
df_studentSubmissions[1,]$學號, sep="_") %>%
stringr::str_remove_all("\\s")
filename
filename <- paste0(filename,".Rmd")
filename
drive_download(
df_studentSubmissions[1,]$attachments[[1]]$driveFile$alternateLink,
path=
file.path(destPath, filename),
overwrite=T
)
drive_download(
file=df_studentSubmissions[1,]$attachments[[1]]$driveFile$alternateLink,
path=file.path(destPath, filename),
overwrite=T
)
file.path(destPath, filename)
destPath = file.path("studentsSubmission", title) %>%
stringr::str_remove_all("\\s")
if(!dir.exists(destPath)) dir.create(destPath, recursive = T)
require(googledrive)
filename <- paste(title,
df_studentSubmissions[1,]$學號, sep="_") %>%
stringr::str_remove_all("\\s")
filename <- paste0(filename,".Rmd")
drive_download(
file=df_studentSubmissions[1,]$attachments[[1]]$driveFile$alternateLink,
path=file.path(destPath, filename),
overwrite=T
)
df_studentSubmissions[1,]$attachments[[1]]
df_studentSubmissions[1,]$attachments[[2]]
seq_along(df_studentSubmissions$attachments)
df_studentSubmissions$attachments[[1]]
styler:::style_selection()
download_studentRmds <- function(title, df_studentSubmissions)
{
destPath = file.path("studentsSubmission", title) %>%
stringr::str_remove_all("\\s")
if(!dir.exists(destPath)) dir.create(destPath, recursive = T)
require(googledrive)
for (.x in seq_along(df_studentSubmissions$attachments)) {
if (is.null(df_studentSubmissions$attachments[[.x]])) next
filename <- paste(title,
df_studentSubmissions[1, ]$學號,
sep = "_"
) %>%
stringr::str_remove_all("\\s")
filename <- paste0(filename, ".Rmd")
drive_download(
file = df_studentSubmissions[1, ]$attachments[[1]]$driveFile$alternateLink,
path = file.path(destPath, filename),
overwrite = T
)
}
}
# download student submission Rmds
download_studentRmds(title, df_studentSubmissions)
for (.x in seq_along(df_studentSubmissions$attachments)) {
if (is.null(df_studentSubmissions$attachments[[.x]])) next
filename <- paste(title,
df_studentSubmissions[1, ]$學號,
sep = "_"
) %>%
stringr::str_remove_all("\\s")
filename <- paste0(filename, ".Rmd")
drive_download(
file = df_studentSubmissions[1, ]$attachments[[1]]$driveFile$alternateLink,
path = file.path(destPath, filename),
overwrite = T
)
}
.x
df_studentSubmissions$attachments[[.x]]
drive_download(
file = df_studentSubmissions[1, ]$attachments[[1]]$driveFile,
path = file.path(destPath, filename),
overwrite = T
)
filename <- paste(title,
df_studentSubmissions[.x, ]$學號,
sep = "_"
) %>%
stringr::str_remove_all("\\s")
filename <- paste0(filename, ".Rmd")
drive_download(
file = df_studentSubmissions[.x, ]$attachments[[.x]]$driveFile,
path = file.path(destPath, filename),
overwrite = T
)
.x
df_studentSubmissions[.x, ]$attachments[[1]]$driveFile
drive_download(
file = df_studentSubmissions[.x, ]$attachments[[1]]$driveFile,
path = file.path(destPath, filename),
overwrite = T
)
drive_download(
file = df_studentSubmissions[.x, ]$attachments[[1]]$driveFile$alternateLink,
path = file.path(destPath, filename),
overwrite = T
)
download_studentRmds <- function(title, df_studentSubmissions)
{
destPath = file.path("studentsSubmission", title) %>%
stringr::str_remove_all("\\s")
if(!dir.exists(destPath)) dir.create(destPath, recursive = T)
require(googledrive)
for (.x in seq_along(df_studentSubmissions$attachments)) {
if (is.null(df_studentSubmissions$attachments[[.x]])) next
filename <- paste(title,
df_studentSubmissions[.x, ]$學號,
sep = "_"
) %>%
stringr::str_remove_all("\\s")
filename <- paste0(filename, ".Rmd")
drive_download(
file = df_studentSubmissions[.x, ]$attachments[[1]]$driveFile$alternateLink,
path = file.path(destPath, filename),
overwrite = T
)
}
}
# download student submission Rmds
download_studentRmds(title, df_studentSubmissions)
devtools::document()
devtools::document()
library(googleclassroom)
a <- "b"
list(a=3)
rlang::expr(list(!!a=3))
rlang::expr(list(!!a:=3))
rlang::expr(list(!!a:=3)) -> todo
eval(todo)
rlang::expr(list((!!a)=3))
get_profile <- function(){
requestPhrase <- glue::glue("GET https://classroom.googleapis.com/v1/userProfiles/me")
get_profileFun <- classroom_apiFunctional(requestPhrase)
get_profileFun()
}
get_profile
get_profile()
devtools::load_all(".")
get_profile()
classroomService() -> cs
get_profile <- function(){
requestPhrase <- glue::glue("GET https://classroom.googleapis.com/v1/userProfiles/me")
get_profileFun <- classroom_apiFunctional(requestPhrase)
get_profileFun()
}
get_profile()
library(googleclassroom)
library(googleclassroom)
devtools::load_all(".")
devtools::document()
load("~/Github/course-dashboard-programming-for-data-science/summary_download_hw1.Rdata")
View(summary_download_hw1)
devtools::load_all(".")
library(googleclassroom)
library(googleclassroom)
