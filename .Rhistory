.auth$set_auth_active(TRUE)
invisible()
}
classroom_auth()
scopes
classroom_scopes <- function(){
c(
"https://www.googleapis.com/auth/classroom.courses",
"https://www.googleapis.com/auth/classroom.rosters",
"https://www.googleapis.com/auth/classroom.coursework.me",
"https://www.googleapis.com/auth/classroom.announcements",
"https://www.googleapis.com/auth/classroom.profile.photos",
"https://www.googleapis.com/auth/classroom.profile.emails"
)
}
classroom_auth <- function(email = gargle::gargle_oauth_email(),
path = NULL,
scopes = classroom_scopes(),
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL) {
cred <- gargle::token_fetch(
scopes = scopes,
app = httr::oauth_app(
appname = "classroom",
key = "808460346772-p9cj09ss5ucrnmffh7bkf5pspnu29al3.apps.googleusercontent.com",
secret = "uOwQ5PDbKLsA4CCWC3Mkim83"),
email = email,
path = path,
package = "googleclassroom",
cache = cache,
use_oob = use_oob,
token = token
)
if (!inherits(cred, "Token2.0")) {
# throw an informative error here
}
.auth$set_cred(cred)
.auth$set_auth_active(TRUE)
invisible()
}
classroom_auth()
classroom_auth <- function(email = gargle::gargle_oauth_email(),
path = NULL,
scopes = classroom_scopes(),
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL) {
cred <- gargle::token_fetch(
scopes = scopes,
app = httr::oauth_app(
appname = "classroom",
key = "808460346772-p9cj09ss5ucrnmffh7bkf5pspnu29al3.apps.googleusercontent.com",
secret = "uOwQ5PDbKLsA4CCWC3Mkim83"),
email = email,
path = path,
package = "googleclassroom",
cache = cache,
use_oob = use_oob,
token = token
)
.auth <- gargle::init_AuthState(
package     = "googleclassroom",
auth_active = TRUE
# app = NULL,
# api_key = NULL,
# cred = NULL
)
if (!inherits(cred, "Token2.0")) {
# throw an informative error here
}
.auth$set_cred(cred)
.auth$set_auth_active(TRUE)
invisible()
}
classroom_auth()
.auth <- gargle::init_AuthState(
package     = "googleclassroom",
auth_active = TRUE
# app = NULL,
# api_key = NULL,
# cred = NULL
)
classroom_auth <- function(email = gargle::gargle_oauth_email(),
path = NULL,
scopes = classroom_scopes(),
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL) {
cred <- gargle::token_fetch(
scopes = scopes,
app = httr::oauth_app(
appname = "classroom",
key = "808460346772-p9cj09ss5ucrnmffh7bkf5pspnu29al3.apps.googleusercontent.com",
secret = "uOwQ5PDbKLsA4CCWC3Mkim83"),
email = email,
path = path,
package = "googleclassroom",
cache = cache,
use_oob = use_oob,
token = token
)
if (!inherits(cred, "Token2.0")) {
# throw an informative error here
}
.auth$set_cred(cred)
.auth$set_auth_active(TRUE)
invisible()
}
.auth$get_cred()
.auth$auth_active
.auth$clear_cred()
classroom_auth()
.auth$has_cred()
.auth$get_cred()
classroom_tokenFetch <- function(email = gargle::gargle_oauth_email(),
path = NULL,
scopes = classroom_scopes(),
cache = gargle::gargle_oauth_cache(),
use_oob = gargle::gargle_oob_default(),
token = NULL) {
cred <- gargle::token_fetch(
scopes = scopes,
app = httr::oauth_app(
appname = "classroom",
key = "808460346772-p9cj09ss5ucrnmffh7bkf5pspnu29al3.apps.googleusercontent.com",
secret = "uOwQ5PDbKLsA4CCWC3Mkim83"),
email = email,
path = path,
package = "googleclassroom",
cache = cache,
use_oob = use_oob,
token = token
)
if (!inherits(cred, "Token2.0")) {
# throw an informative error here
}
.auth$set_cred(cred)
.auth$set_auth_active(TRUE)
invisible()
}
classroom_auth <- function(){
.auth <- gargle::init_AuthState(
package     = "googleclassroom",
auth_active = TRUE
# app = NULL,
# api_key = NULL,
# cred = NULL
)
classroom_tokenFetch()
}
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
debug(classroom_auth)
classroom_auth()
newEnv$.auth
debug(classroom_tokenFetch)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
.auth
.auth
requestPhrase = "GET https://classroom.googleapis.com/v1/courses"
stringr::str_split(requestPhrase,"\\s")
stringr::str_split(requestPhrase,"\\s") -> result
names(result) <- c("VERB","url")
result
get_verb_url <- function(requestPhrase){
stringr::str_split(requestPhrase,"\\s") -> result
names(result) <- c("VERB","url")
result
}
result=get_verb_url(requestPhrase)
stringr::str_split(requestPhrase,"\\s") %>%
unlist() -> result
get_verb_url <- function(requestPhrase){
unlist(stringr::str_split(requestPhrase,"\\s")) ->result
names(result) <- c("VERB","url")
result
}
result=get_verb_url(requestPhrase)
result
classroomUrl=result[["VERB"]]
httr::config(token=.auth)
VERB=result[["VERB"]]
classroomUrl=result[["url"]]
classroom_apiFunctional <- function(requestPhrase){
result=get_verb_url(requestPhrase)
VERB=result[["VERB"]]
classroomUrl=result[["url"]]
function(...){
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=classroomUrl,
config=httr::config(token=.auth),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
content(response)
}
}
list_courses <- classroom_apiFunctional(requestPhrase = requestPhrase)
httr::GET
library(httr)
list_courses(
query=list(
courseStates="ACTIVE"
)
) -> myCourses
debug(list_courses)
list_courses(
query=list(
courseStates="ACTIVE"
)
) -> myCourses
requestExpr
classroomUrl
classroom_apiFunctional <- function(requestPhrase){
result=get_verb_url(requestPhrase)
VERB=result[["VERB"]]
classroomUrl=result[["url"]]
function(...){
argList = list(...)
requestExpr=rlang::quo({
loadNamespace("httr")
(!!VERB)(
url=classroomUrl,
config=httr::config(token=.auth),...
)
})
response <- rlang::eval_tidy(
requestExpr
)
content(response)
}
}
list_courses <- classroom_apiFunctional(requestPhrase = requestPhrase)
debug(list_courses)
list_courses(
query=list(
courseStates="ACTIVE"
)
) -> myCourses
argList
argList$query$courseStates
require(httr)
argList=list(query=list(
courseStates="ACTIVE"
))
argList
append(argList, list(url=url, config=config))
append(argList, list(url=url, config=config))-> argList
requestExpr=rlang::quo({
do.call(!!VERB,argList)
})
requestExpr
argList
response <- rlang::eval_tidy(
requestExpr
)
requestExpr=rlang::quo({
do.call(!!VERB,argList)
})
requestExpr
argList
View(get_verb_url)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
debug(list_courses)
list_courses(
query=list(
courseStates="ACTIVE"
)
) -> myCourses
classroom_apiFunctional
list_courses <- classroom_apiFunctional(requestPhrase = requestPhrase)
list_courses
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
classroom_auth()
list_courses(
query=list(
courseStates="ACTIVE"
)
) -> myCourses
.auth$cred
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
View(myCourses)
list_activeCourses <- function(){
requestPhrase = "GET https://classroom.googleapis.com/v1/courses"
list_courses <- classroom_apiFunctional(requestPhrase = requestPhrase)
list_courses(query=list(
courseStates="ACTIVE"
))
}
myCourses <- list_activeCourses()
View(myCourses)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
cs <- classroomService()
cs$list_activeCourses() -> myCourses
usethis::use_vignette("google-classroom-api","Google classroom API")
library(googleclassroom)
library(googleclassroom)
usethise::use_package("gargle")
usethis::use_package("gargle")
usethis::use_package("httr")
usethis::use_package("rlang")
devtools::document()
library(googleclassroom)
library(googleclassroom)
library(googleclassroom)
cs <- classroomService()
myCourses <- cs$list_activeCourses()
library(dplyr)
myCourses[[1]]
myCourses[[1]] %>%
purrr::map_dfr(~.x)
myCourses[[1]][[1]]
myCourses[[1]][[1]] %>% as.data.frame()
myCourses[[1]] %>%
purrr::map_dfr(~{.x %>% as.data.frame()})
myCourses[[1]] %>%
purrr::map_dfr(~{.x %>% as.data.frame()}) -> myCourses
View(myCourses)
list_studentsInACourse <- function(courseId){
requestPhrase = paste0("GET https://classroom.googleapis.com/v1/courses/",courseId,"/students")
list_students <- classroom_apiFunctional(requestPhrase = requestPhrase)
list_students(query=list(
pageSize=100
))
}
View(list_studentsInACourse)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
library(googleclassroom)
library(googleclassroom)
library(googleclassroom)
library(googleclassroom)
cs <- classroomService()
myCourses <- cs$list_activeCourses()
library(dplyr)
myCourses[[1]] %>%
purrr::map_dfr(~{.x %>% as.data.frame()}) -> myCourses
courseId="141372606074"
cs$list_studentsInACourse(courseId) -> myStudents
View(myStudents)
myStudents$nextPageToken
requestPhrase = paste0("GET https://classroom.googleapis.com/v1/courses/",courseId,"/students")
list_students <- classroom_apiFunctional(requestPhrase = requestPhrase)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
requestPhrase = paste0("GET https://classroom.googleapis.com/v1/courses/",courseId,"/students")
list_students <- classroom_apiFunctional(requestPhrase = requestPhrase)
firstPage <- list_students(query=list(
pageSize=100
))
secondPage <- list_students(query=list(
pageSize=100,
pageToken=firstPage$nextPageToken
))
View(secondPage)
thirdPage <- list_students(query=list(
pageSize=100,
pageToken=second$nextPageToken
))
View(secondPage)
thirdPage <- list_students(query=list(
pageSize=100,
pageToken=secondPage$nextPageToken
))
View(thirdPage)
newPage <- list_students(query=list(
pageSize=100,
pageToken=firstPage$nextPageToken
))
students <- firstPage$students
append(students, newPage$students)
nextPageToken <- firstPage$nextPageToken
students <- firstPage$students
nextPageToken <- firstPage$nextPageToken
count=0; max_count=10
while(length(firstPage)==2 && count <=max_count){
newPage <- list_students(query=list(
pageSize=100,
pageToken=nextPageToken
))
append(students, newPage$students) -> students
nextPageToken <- newPage$nextPageToken
firstPage=newPage
}
View(students)
library(googleclassroom)
library(googleclassroom)
library(googleclassroom)
cs <- classroomService()
myCourses <- cs$list_activeCourses()
library(dplyr)
myCourses[[1]] %>%
purrr::map_dfr(~{.x %>% as.data.frame()}) -> myCourses
courseId="141372606074"
cs$list_studentsInACourse(courseId) -> myStudents
View(myStudents)
myStudents[[1]][["profile"]][["photoUrl"]] %>% browseURL()
library(econDS)
I <- classroomService()
I <- econDS::I_have_a_question()
I <- econDS::classService()
devtools::load_all(".")
courseId="141372606074"
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
requestPhrase= "POST https://classroom.googleapis.com/v1/courses/{courseId}/courseWork"
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
.title="09-23 attendance"
.maxPoints=10
.description="當天有完成fork"
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description
), auto_unbox = T
)
) -> response
classroom_auth()
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description
), auto_unbox = T
)
) -> response
View(response)
source('~/Github/googleclassroom/R/googleclassroom.R', echo=TRUE)
View(response)
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description,
workType="COURSE_WORK_TYPE_UNSPECIFIED"
), auto_unbox = T
)
) -> response
View(response)
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description,
workType="ASSIGNMENT"
), auto_unbox = T
)
) -> response
View(response)
requestPhrase
debug(create_courseWork)
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description,
workType="ASSIGNMENT"
), auto_unbox = T
)
) -> response
requestExpr
classroomUrl
requestPhrase= glue::glue("POST https://classroom.googleapis.com/v1/courses/{courseId}/courseWork")
requestPhrase
create_courseWork = classroom_apiFunctional(requestPhrase = requestPhrase)
create_courseWork(
body=jsonlite::toJSON(
list(
title=.title,
maxPoints=.maxPoints,
description=.description,
workType="ASSIGNMENT"
), auto_unbox = T
)
) -> response
View(response)
devtools::load_all(".")
courseId <- "141372606074"
requestPhrase <- glue::glue("GET https://classroom.googleapis.com/v1/courses/{courseId}/teachers")
requestPhrase
list_teachersFun <- classroom_apiFunctional(requestPhrase)
list_teachersFun()
classroom_tokenFetch()
classroom_auth()
list_teachersFun()
list_teacherFun
library(googleclassroom)
library(googleclassroom)
